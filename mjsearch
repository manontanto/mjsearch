#!/usr/bin/env python3
# mjsearch [search word]
#
# manontanto
import os
import sys
import glob
import re
import xml.etree.ElementTree as ET
import gzip
import pyperclip
from chardet import detect
from striprtf.striprtf import rtf_to_text

DEBUG = False

doc_regex = re.compile(r'.+MacJournal/([^/]+)(\.mjdoc).*')
id_regex = re.compile(r'/Content/(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\.')

DocPath = "/Users/***/Library/Application Support/MacJournal/*.mjdoc"
TopicPath = "/Content/*"

def ReadRtf(f):
    '''
    Input : Rtf-File path
    Output: Text-file LIST of lines
    '''
    enc = DetectEnc(f)
    if enc == 'cp932':
        enc = 'utf-8'
    if DEBUG is True:
        print(f)
    with open(f, 'r', encoding=enc) as ff:
        try:
            t = ff.read()
        except UnicodeDecodeError: 
            print("Error on ff.read()")
            print(f"f: {f}")
            sys.exit()
        try:
            d = rtf_to_text(t, errors='ignore')
        except Exception as exc:
            print(f'問題あり: {exc}')
            print(f"f: {f}")
            print(f.split('/')[8])
            sys.exit()
        return d.split('\n')

def DetectEnc(f):
    with open(f, 'rb') as ff:
        b = ff.read()
    return detect(b)['encoding']

def MkIndex(indexFilePath):
    '''
    Input: index.mjml.gz のpath
    Output: entry_titleとentry_idのdictionary
    '''
    tree = ET.parse(gzip.GzipFile(indexFilePath))
    root = tree.getroot()
    parent_map = dict((c, p) for p in tree.iter() for c in p)
    indexDic = {}
    for elem in root.iter('entry'):
        title = elem.find('topic').text
        id = elem.find('content').attrib['id']
        parent = parent_map[parent_map[elem]].find('name').text
        indexDic[id] = {"title": title, "parent":parent}
    return indexDic

def main():
    if len(sys.argv) == 2:
        sword = sys.argv[1].lower()
    else:
        sword = pyperclip.paste().lower()

    for Doc in glob.glob(DocPath):  # 各ジャーナルにつき
        indexDic = MkIndex(Doc + "/index.mjml.gz")  # topic(title)とidの対応辞書
        for topic in glob.glob(Doc + TopicPath):  # topicは'topic+拡張子'で、file名
            if os.path.getsize(topic) == 0:
                continue
            ext = os.path.splitext(topic)[1][1:]
            if ext in ('rtf', 'rtfd'):
                if ext == 'rtfd':
                    topic = topic + "/TXT.rtf"
                lineList = ReadRtf(topic)
            else:
                enc = DetectEnc(topic)
                if enc == 'Windows-1254':
                    enc = 'utf-8'
                with open(topic, 'r', encoding=enc) as f:
                    try:
                        lineList = f.readlines()
                    except UnicodeDecodeError:
                        print(enc, '================')
                        print(topic)
                        sys.exit()
            d = doc_regex.match(Doc).group(1)  # ジャーナル名
            topic_id = id_regex.search(topic).group(1) # id
            try:
                title = indexDic[topic_id]["title"]
            except KeyError:
                print(f"Oops! There is no key: {topic_id}")
                print("topic: " + topic)
                print("topic_id: " + topic_id)
                sys.exit()
            parent = indexDic[topic_id]["parent"]
            if sword in title.lower():
                print(f"《 {d}..{parent} 》 [ {title} ]") # document, topic
                continue
            for l in lineList:
                if sword in l.lower():
                    print(f"《 {d}..{parent} 》 [ {title} ]") # document, topic
                    print(l)    # ヒット行

if __name__ == '__main__':
    main()
